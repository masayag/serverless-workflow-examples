id: create-ocp-project
version: "1.0"
specVersion: "0.8"
name: "Create OpenShift Project"
description: Creating an OpenShift Project
dataInputSchema: schemas/create-ocp-project__main-schema.json
functions:
  - name: jiraCreateIssue
    operation: specs/jira-openapi.yaml#createIssue
  - name: jiraGetIssue
    operation: specs/jira-openapi.yaml#getIssue
  - name: jiraCloseIssue
    operation: specs/jira-openapi.yaml#transitionIssue
  - name: jiraGetIssueTransitions
    operation: specs/jira-openapi.yaml#getIssueTransitions
  - name: createNotification
    operation: specs/notifications-openapi.yaml#createNotification
  - name: print
    type: custom
    operation: sysout
start: "[Audit]: workflow started"
states:
  - name: "[Audit]: workflow started"
    type: operation
    actions:
      - name: callbackAction
        functionRef:
          refName: jiraCreateIssue
          arguments:
            fields:
              description: |
                Please create a new Github Repository: https://github.com/parodos-dev/onboarding
                Go to https://github.com/new"'
              issuetype:
                name: Task
              labels:
                - backstage-workflow
                - '"workflowId=" + $WORKFLOW.instanceId'
              project:
                key: .inputs.auditProjectKey
              summary: New Repository for onboarding project on Backstage
        actionDataFilter:
          toStateData: .auditJiraCreateIssueResult
    transition: Open issue on Jira for operations
  - name: Open issue on Jira for operations
    type: operation
    actions:
      - name: callbackAction
        functionRef:
          refName: jiraCreateIssue
          arguments:
            fields:
              description: |
                Please create a new Github Repository: https://github.com/parodos-dev/onboarding
                Go to https://github.com/new
              issuetype:
                name: Task
              labels:
                - backstage-workflow
                - '"workflowId=" + $WORKFLOW.instanceId'
              project:
                key: .inputs.operationsProjectKey
              summary: New Repository for onboarding project on Backstage
        actionDataFilter:
          toStateData: .operationsJiraCreateIssueResult
    transition: "Notify Backstage: Jira ticket created"
  - name: "Notify Backstage: Jira ticket created"
    type: operation
    actions:
      - name: "Create notification: Jira ticket created"
        functionRef:
          refName: createNotification
          arguments:
            title: "Jira ticket created"
            message: "Jira ticket created"
            origin: "SonataFlow"
            topic: "Create OCP Project workflow"
            targetUsers:
              - "default/guest" # replace with the approver user
            actions:
              - title: "View on Jira"
                # There are more dynamic ways to get the Jira URL, but for simplicity, we are using a hardcoded URL
                url: '$SECRET.jira_url + "/jira/servicedesk/projects/" + .inputs.operationsProjectKey + "/issues/" + .operationsJiraCreateIssueResult.key'
    transition: Poll Operation Jira issue
  - name: Poll Operation Jira issue
    type: operation
    actions:
      - name: get issue
        actionDataFilter:
          toStateData: .operationsJiraGetIssueResult
        functionRef:
          refName: jiraGetIssue
          arguments:
            issueIdOrKey: .operationsJiraCreateIssueResult.id
        sleep:
          before: PT10S
    transition: Check Operation issue done
  - name: Check Operation issue done
    type: switch
    dataConditions:
      - name: Resource request denied
        condition: .operationsJiraGetIssueResult.fields.status.statusCategory.key == "done" and .operationsJiraGetIssueResult.fields.resolution.name != "Done"
        transition: "[Audit]: Close issue on Jira"
      - name: Resource request authorized
        condition: .operationsJiraGetIssueResult.fields.status.statusCategory.key == "done" and .operationsJiraGetIssueResult.fields.resolution.name == "Done"
        transition: "Post operation: resource created successfully"
    defaultCondition:
      transition:
        nextState: Poll Operation Jira issue
  - name: "Post operation: resource created successfully"
    type: operation
    actions:
      - name: "Execute post action checks"
        functionRef:
          refName: print
          arguments:
            message: "OK"
    transition:
      nextState: "[Audit]: Close issue on Jira"
  - name: "[Audit]: Close issue on Jira"
    type: operation
    actionMode: sequential
    actions:
      - name: get transition id
        actionDataFilter:
          toStateData: .jiraGetTransitionResult
        functionRef:
          refName: jiraGetIssueTransitions
          arguments:
            issueIdOrKey: .auditJiraCreateIssueResult.id
      - name: Close issue on Jira due to Timeout
        actionDataFilter:
          toStateData: .jiraCloseIssueResult
        functionRef:
          refName: jiraCloseIssue
          arguments:
            issueIdOrKey: .auditJiraCreateIssueResult.id
            transition:
              id: .jiraGetTransitionResult.transitions[] | select(.to.name | contains("Done")) | .id
            update:
              comment:
                - add:
                    body: Issue closed due to time out on Backstage workflow
    end: true
